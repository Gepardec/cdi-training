<ui:composition template="/WEB-INF/layout/layout.xhtml" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:tag="http://tags.cdi.training.gepardec.com">

    <ui:define name="title">
        Microprofile-Config Advanced
    </ui:define>

    <ui:define name="body">
        <section>
            <tag:card id="injection" title="Injection">
                <ui:define name="body">
                    <p>
                        In the first two examples you learn the basic of the basic when it comes to CDI and
                        injection.
                        <br />
                        When you click one of the buttons you will experience an error, so analyze the package
                        <code>at.gepardec.training.cdi.basic.inject</code> and find out what's going
                        wrong.
                    </p>

                    <p>
                        The specification for
                        <a href="#{cdiUri.specUri}#injection" target="_blank">
                            Dependency Injection
                        </a>
                    </p>
                </ui:define>
                <ui:define name="buttons">
                    <div class="d-flex justify-content-center flex-row my-2">
                        <div class="ms-2 d-flex align-items-center">
                            <tag:button id="toInjectField" text="Field Example" path="/basic/inject/field" />
                        </div>
                        <div class="ms-2 d-flex align-items-center">
                            <tag:button id="toInjectConstructor" text="Constructor Example" path="/basic/inject/constructor" />
                        </div>
                    </div>
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="scopes" title="Scopes">
                <ui:define name="body">
                    <p>
                        In this example you will learn about CDI scopes, their impacts and proper usage
                    </p>
                    <ul>
                        <li>
                            <b>Basic Scopes:</b> Beans with scopes
                        </li>
                        <li>
                            <b>Mixed Scopes:</b> Scoped beans which inject scoped beans
                        </li>
                        <li>
                            <b>Dependent Scope:</b> The CDI default scope
                        </li>
                    </ul>

                    <p>
                        The specification for CDI
                        <a href="#{cdiUri.specUri}#contexts"
                            target="_blank">
                            Scopes and Contexts
                        </a>
                    </p>
                </ui:define>

                <ui:define name="buttons">
                    <div class="d-flex justify-content-center flex-row my-2">
                        <div class="ms-2 d-flex align-items-center">
                            <tag:button id="toScopesBasic" text="Basic Example" path="/basic/scopes/basic" />
                        </div>
                        <div class="ms-2 d-flex align-items-center">
                            <tag:button id="toScopesMixed" text="Mixed Example" path="/basic/scopes/mixed" />
                        </div>
                        <div class="ms-2 d-flex align-items-center">
                            <tag:button id="toScopesDependent" text="Dependent Example" path="/basic/scopes/dependent" />
                        </div>
                    </div>
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="initialization" title="Initialization">
                <ui:define name="body">
                    <p>
                        CDI beans have a lifecycle and we can observe events when beans get created and
                        destroyed.
                    </p>
                    <p>
                        How to use <code>@PostConstruct</code> and <code>@PreDestroy</code> in CDI
                        <a href="#{cdiUri.jeeTutorialInitialization}"
                            target="_blank">
                            #{cdiUri.jeeTutorialInitialization}
                        </a>
                    </p>
                </ui:define>

                <ui:define name="buttons">
                    <tag:button id="toInitialization" text="Example" path="/basic/initialization" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="qualifiers" title="Qualifiers">
                <ui:define name="body">
                    <p>
                        When we have multiple implementations for an CDI bean (interface), then we need to
                        qualify
                        them, otherwise how is the CDI container supposed to know what implementation to
                        provide?
                    </p>
                    <p>
                        The specification for CDI Qualifiers
                        <a href="#{cdiUri.specUri}#qualifiers"
                            target="_blank">
                            Qualifiers
                        </a>
                    </p>
                </ui:define>

                <ui:define name="buttons">
                    <tag:button id="toqualifiers" text="Example" path="/basic/qualifiers" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="producers" title="Producers">
                <ui:define name="body">
                    <p>
                        Usually the CDI container creates the CDI bean instance via the empty constructor, but
                        what if the instantiation of the instance is not that simple?
                    </p>
                    <p>
                        The specification for CDI
                        <a href="#{cdiUri.specUri}#producer_method"
                            target="_blank">
                            Producer Methods
                        </a>
                        and
                        <a href="#{cdiUri.specUri}#producer_field"
                            target="_blank">
                            Producer Fields
                        </a>
                    </p>
                </ui:define>

                <ui:define name="buttons">
                    <tag:button id="toProducers" text="Example" path="/basic/producers" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="interceptors" title="Interceptors">
                <ui:define name="body">
                    <p>
                        Aspects in CDI are implemented via interceptors and applied via interceptor binding
                        annotations, for instance <code>@Transactional</code>.
                    </p>

                    <p>
                        The specification for CDI
                        <a href="#{cdiUri.specUri}#interceptors"
                            target="_blank">
                            Interceptors
                        </a>
                    </p>
                </ui:define>

                <ui:define name="buttons">
                    <tag:button id="toInterceptors" text="Example" path="/basic/interceptors" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="decorators" title="Decorators">
                <ui:define name="body">
                    <p>
                        CDI interceptors are generic and are applied via annotations, but CDI decorators
                        implement
                        the CDI bean type and are applied in a de-coupled fashion.
                    </p>

                    <p>
                        The specification for CDI
                        <a href="#{cdiUri.specUri}#decorators" target="_blank">
                            Decorators
                        </a>
                    </p>
                </ui:define>

                <ui:define name="buttons">
                    <tag:button id="toDecorators" text="Example" path="/basic/decorators" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="events" title="Events">
                <ui:define name="body">
                    <p>
                        CDI provides an event system which can be used to couple parts of the application
                        in a de-coupled fashion.
                    </p>

                    <p>
                        The specification for CDI
                        <a href="#{cdiUri.specUri}#events" target="_blank">
                            Events
                        </a>
                    </p>
                </ui:define>

                <ui:define name="buttons">
                    <tag:button id="toEvents" text="Example" path="/basic/events" />
                </ui:define>
            </tag:card>
        </section>
    </ui:define>
</ui:composition>
