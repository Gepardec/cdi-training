<ui:composition template="/WEB-INF/layout/layout.xhtml" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:tag="http://tags.cdi.training.gepardec.com"
>
    <!--@elvariable id="result" type="java.lang.String"-->

    <ui:define name="title">
        Lookup Factory
    </ui:define>

    <ui:define name="body">
        <div class="container-lg">
            <div class="row my-2">
                <div class="col">
                    <div class="text-center">
                        <h1>Lookup Factory</h1>
                    </div>
                </div>

                <hr class="my-3" />
            </div>

            <div class="row my-2">
                <div class="col">
                    <p>
                        The specification for the
                        <a
                            href="#{cdiUri.specUri}#programmatic_lookup" target="_blank">
                            programmatic lookup
                        </a>
                        in CDI.
                    </p>
                    <p>
                        Sometimes it is necessary to retrieve a CDI Bean dynamically depending on a discriminator, which
                        cannot be realized via injections, because they are defined during compile time. CDI provides
                        the CDI Bean <code>Instance&lt;T&gt;</code> for that purpose. The type <code>T</code> can be
                        seen as type of filter which restricts the access to type hierarchy.
                    </p>
                    <p>
                        One problem resides with
                        <code>@Dependent</code> beans, which when retrieved via <code>Instance&lt;T&gt;</code> are not
                        owned by the CDI Bean which uses <code>Instance&lt;T&gt;</code> but the
                        <code>Instance&lt;T&gt;</code> instance itself, which leads to memory leaks. The memory leak is
                        due to the fact that <code>Instance&lt;T&gt;</code> can be seen as an application scoped bean
                        which always keeps the reference to the created dependent scoped bean, unless <code>instance.destroy(dependentBean)</code>
                        is called.
                    </p>
                    <p>
                        A use-case would be the need for using a specific implementation which is defined by
                        discriminator which is provided by an input or a database entry.
                    </p>

                    <p>
                        See the package <code>at.gepardec.cditraining.uc.lookupfactory.*</code> for the relevant
                        classes.
                        Especially take a look at the comments
                    </p>

                    <hr class="my-3" />

                    <div class="d-flex justify-content-center flex-row my-2">
                        <div class="ms-2 d-flex align-items-center">
                            <tag:button id="selectServiceA" text="Select Service A" path="/advanced/lookup-factory/A" />
                        </div>

                        <div class="ms-2 d-flex align-items-center">
                            <tag:button id="selectServiceB" text="Select Service B" path="/advanced/lookup-factory/B" />
                        </div>
                    </div>

                    <hr class="mt-3 mb-1" />
                </div>
            </div>


            <div class="row my-2">
                <div class="col">
                    <div class="row">
                        <div class="col-sm text-center text-sm-right mr-sm-1">
                            Selected service implementation
                        </div>
                        <div class="col-sm text-center text-sm-left ml-sm-1">
                            <h:outputText value="#{result}" styleClass="font-weight-bold" />
                        </div>
                    </div>

                    <hr class="my-3" />

                    <div class="text-center font-weight-bold">
                        <p>
                            The solution for this problem is to implement a factory which uses
                            <code>Instance&lt;T&gt;</code>
                            and provides the implementation instance depending on a discriminator and handles the
                            cleanup if the implementation instance is dependent scoped.
                        </p>
                    </div>

                    <hr class="my-3" />
                </div>
            </div>

        </div>
    </ui:define>
</ui:composition>
